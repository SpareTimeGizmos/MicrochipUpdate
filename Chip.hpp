//++
// Chip.hpp - CChip microchip data class and CChips collection class
//
//   COPYRIGHT (C) 2015-2022 BY SPARE TIME GIZMOS.  ALL RIGHTS RESERVED.
//
// LICENSE:
//    This file is part of the NGRR Microchip Data project.  This program is
// free software; you may redistribute it and/or modify it under the terms of
// the GNU General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for
// more details.  You should have received a copy of the GNU General Public
// License along with this program. If not, see https://www.gnu.org/licenses/. 
//
// DESCRIPTION:
//   This file defines two classes - a CChip class, which encapsulates all the
// microchip related data from the NGRR database, and a CChips class, which is
// a collection of CChip objects.  
//
//                                              Bob Armstrong [9-Jul-2019]
//
// REVISION HISTORY:
//  9-JUL-19  RLA   New file.
//--
//000000001111111111222222222233333333334444444444555555555566666666667777777777
//234567890123456789012345678901234567890123456789012345678901234567890123456789
#pragma once
#include <stdint.h>	        // uint8_t, uint32_t, etc ...
#include <string>               // C++ std::string class, et al ...
#include <unordered_map>        // C++ std::unordered_map (aka a hash table)
using std::size_t;              // ...
using std::string;              // ...
using std::unordered_map;       // ...
class CCSVRow;                  // ...
class CDog;                     // individual dog data
class CDogs;                    // collection of all NGRR dogs

// NGRR Magic constants ...
#define NGRR_CHIP_PREFIX    "98102"                   // prefix for all Datamars/NGRR chips
#define NGRR_SPECIES        "Dog"                     // well, duh!
#define NGRR_PRIMARY_BREED  "Golden Retriever"        // if it's not a Golden Retriever, it's just a dog...
#define NGRR_EMAIL_ADDRESS  "info@ngrr.org"           // our email address
#define NGRR_FIRST_NAME     "NorCal Golden Retriever" // our "first name" for registration
#define NGRR_LAST_NAME      "Rescue"                  //  "   last name    "     "     "
#define NGRR_PHONE_NUMBER   "6506650964"              //  "   phone number "     "     "


class CChip {
  //++
  // Data for a single microchip transaction ...
  //--

public:
  enum {
    // Column numbers for the "Dogs Data" (DD) report generated by the NGRR web page ...
    COL_NGRR_FNAME			=  1,	// Adopting party's first name
    COL_NGRR_LNAME			=  2,	// ... last name
    COL_NGRR_EMAIL_ADDRESS		=  3,	// ... email address 
    COL_NGRR_ADDRESS_1		        =  4,	// ... street address
    COL_NGRR_ADDRESS_2		        =  5,	// ...
    COL_NGRR_CITY			=  6,	// ... city
    COL_NGRR_STATE			=  7,	// ... state
    COL_NGRR_ZIP_CODE		        =  8,	// ... zip code
    COL_NGRR_HOME_PHONE		        =  9,	// ... phone number
    COL_NGRR_WORK_PHONE		        = 10,	// ... phone number
    COL_NGRR_CELL_PHONE		        = 11,	// ... phone number
    COL_NGRR_PET_NAME		        = 12,	// dog name
    COL_NGRR_MICROCHIP_NUMBER	        = 13,	// microchip number
    COL_NGRR_SERVICE_DATE		= 14,	// date dogs' data was last changed
    COL_NGRR_DATE_OF_BIRTH		= 15,	// dog's DOB
    COL_NGRR_SPECIES			= 16,	// "Dog"
    COL_NGRR_SEX			= 17,	// Male/Female
    COL_NGRR_SPAYED_NEUTERED		= 18,	// Yes/No
    COL_NGRR_PRIMARY_BREED		= 19,	// "Golden Retriever"
    COL_NGRR_SECONDARY_BREED		= 20,	// ""
    COL_NGRR_RESCUE_GROUP_EMAIL	        = 21,	// "info@ngrr.org"
    COL_NGRR_NOTES			= 22,	// ... unused? ...
    TOTAL_NGRR_COLUMNS 		        = 22,	// number of colums in a dog data CSV
    // Column numbers for the Found.org upload file ...
    COL_FOUND_FIRST_NAME		=  1,	// Adopting party's first name
    COL_FOUND_LAST_NAME			=  2,	// ... last name
    COL_FOUND_EMAIL_ADDRESS		=  3,	// ... email address 
    COL_FOUND_ADDRESS_1			=  4,	// ... street address
    COL_FOUND_ADDRESS_2			=  5,	// ...
    COL_FOUND_CITY			=  6,	// ... city
    COL_FOUND_STATE			=  7,	// ... state
    COL_FOUND_ZIP_CODE			=  8,	// ... zip code
    COL_FOUND_HOME_PHONE		=  9,	// ... phone number
    COL_FOUND_WORK_PHONE		= 10,	// ... phone number
    COL_FOUND_CELL_PHONE		= 11,	// ... phone number
    COL_FOUND_PET_NAME			= 12,	// dog name
    COL_FOUND_MICROCHIP_NUMBER		= 13,	// microchip number
    COL_FOUND_SERVICE_DATE		= 14,	// date dogs' data was last changed
    COL_FOUND_DATE_OF_BIRTH		= 15,	// dog's DOB
    COL_FOUND_SPECIES			= 16,	// "Dog"
    COL_FOUND_SEX			= 17,	// Male/Female
    COL_FOUND_SPAYED_NEUTERED		= 18,	// Yes/No
    COL_FOUND_PRIMARY_BREED		= 19,	// "Golden Retriever"
    COL_FOUND_SECONDARY_BREED		= 20,	// ""
    COL_FOUND_RESCUE_GROUP_EMAIL	= 21,	// "info@ngrr.org"
    COL_FOUND_NOTES			= 22,	// ...
    TOTAL_FOUND_COLUMNS 	        = 22	// number of colums in a Found.org file
  };
  // This is the expected header row for the dog information report ...
  static const string m_sNGRRHeaders;    // Header row for NGRR CSV file
  static const string m_sFoundHeaders;   // Header row for Found.org CSV file

public:
  // Constructors ...
  CChip() {};
  // Copy and assignment constructors ...
  CChip (const CChip &chip) = delete;
  CChip& operator= (const CChip &chip) = delete;
  // Destructor ...
  virtual ~CChip() {};

  // CChip public properties ...
public:
  // Get the microchip number associated with this record ...
  string GetMicrochip() const {return m_sMicrochip;}
  // Return a pointer to the associated CDog record ...
  CDog* GetDog() const {assert(m_pDog != NULL);  return m_pDog;}

  // CChip public methods ...
public:
  // Initialize this CChip object ...
  bool Initialize (const CDogs *pDogs, const string sChip);
  // Extract data from a CSV file row ...
  bool FromRow (const CDogs *pDogs, const CCSVRow &row);
  // Create directly from a CDog object ...
  bool FromDog (CDog *pDog);
  // Convert data to a CSV file row ...
  void ToRow (CCSVRow &row) const;
  // Display this chip on stdout ...
  void Display() const;
  // Verify (and fix if necessary) the microchip number ...
  bool VerifyMicrochip(bool fMessage=true) {return VerifyMicrochip(m_sMicrochip, fMessage);}
  static bool VerifyMicrochip (string &sChip, bool fMessage=true);
  // Get today's date in the format YYYY-MM-DD ...
  static string GetToday();

  // Private internal CChip methods ...
protected:

  // Local CChip members ...
protected:
  //   Note that, unlike the dog data, here most of the fields from the CSV
  // file ARE NOT retained.  That's because it is, or at least should be,
  // a duplicate of the data that's already in the CDog object.
  string    m_sMicrochip;	// microchip number for this record ...
  CDog     *m_pDog;             // corresponding CDog record ...
};


class CChips {
  //++
  //   Collection of CChip objects ...  Note that this collection "owns" the
  // associated CChip objects and will delete them all when this collection
  // is deleted!
  //--

public:
  // Define the chip collection hashes ...
  typedef unordered_map<string, CChip *> MICROCHIP_HASH;
  typedef MICROCHIP_HASH::iterator iterator;
  typedef MICROCHIP_HASH::const_iterator const_iterator;

public:
  // Constructors ...
  CChips() {m_mapChip.clear();}
  // Copy and assignment constructors ...
  CChips (const CChips &chips) = delete;
  CChips& operator= (const CChips &chips) = delete;
  // Destructor ...
  virtual ~CChips() {DeleteAll();}

  // CChips collection properties ...
public:
  // Delegate the iterators for NGRR dog numbers and microchips ...
  iterator begin() {return m_mapChip.begin();}
  const const_iterator begin() const {return m_mapChip.begin();}
  iterator end() {return m_mapChip.end();}
  const const_iterator end() const {return m_mapChip.end();}
  // Return the number of microchips ....
  size_t size() const {return m_mapChip.size();}

  // CChips public methods ...
public:
  // Delete all the CChip objects in this collection ....
  void DeleteAll();
  // Add a chip to this collection ...
  bool Add (CChip *pChip);
  //void Add (const CChip &dog) { Add(new CChip(dog)); }
  //void Add (const CCSVRow &row) { Add(new CChip(row)); }
  // Find dogs by  microchip (string) ...
  CChip *Find (string sChip) const;
  // Read or write this collection from/to a CSV file ...
  void ReadFile(const CDogs *pDogs, const string &sFileName);
  void WriteFile (const string &sFileName) const;

  // Private internal CChips methods ...
protected:

  // Local CChips members ...
protected:
  MICROCHIP_HASH  m_mapChip;    // microchip number hash table
};

